
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { useRouter, useParams } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { useState, useEffect } from "react";
import { Loader2, ArrowLeft, BookOpen, Save, AlertTriangle } from "lucide-react";
import type { BlogPostItem } from "@/types/superadmin";
import { getBlogPostBySlug, updateBlogPost } from "@/services/superadmin/blog-service";
import { blogPostFormSchema, type BlogPostFormValues } from "@/types/superadmin-schemas";
import { Skeleton } from "@/components/ui/skeleton";

export default function EditBlogPostPage() {
  const router = useRouter();
  const params = useParams();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [isFetchingPost, setIsFetchingPost] = useState(true);
  const [post, setPost] = useState<BlogPostItem | null>(null);
  const postSlug = params.slug as string;

  const form = useForm<BlogPostFormValues>({
    resolver: zodResolver(blogPostFormSchema),
    defaultValues: {
      title: "", slug: "", author: "", content: "", image: "", dataAiHint: "", tagsInput: "", status: "Draft",
    },
  });

  useEffect(() => {
    if (postSlug) {
      setIsFetchingPost(true);
      getBlogPostBySlug(postSlug).then(foundPost => {
        if (foundPost) {
          setPost(foundPost);
          form.reset({
            ...foundPost,
            tagsInput: foundPost.tags?.join(', ') || '',
          });
        } else {
          toast({ variant: "destructive", title: "Error", description: "Post no encontrado." });
          router.replace("/superadmin/blog-management");
        }
        setIsFetchingPost(false);
      });
    }
  }, [postSlug, form, router, toast]);

  const titleValue = form.watch("title");
  const currentSlug = form.watch("slug");

  useEffect(() => {
    if (titleValue && (!currentSlug || (post && currentSlug !== post.slug))) {
      const currentPostSlugMightBeAutoGenerated = post?.slug === post?.title
        .toLowerCase()
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();

      if (!currentSlug || (currentSlug === post?.slug && currentPostSlugMightBeAutoGenerated)) {
         const generatedSlug = titleValue
          .toLowerCase()
          .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();
        form.setValue("slug", generatedSlug, { shouldValidate: true });
      }
    }
  }, [titleValue, currentSlug, post, form]);

  async function onSubmit(values: BlogPostFormValues) {
    if (!post) return;
    setIsLoading(true);

    const updatedPostData: Partial<BlogPostItem> = { // Use Partial here for update
      title: values.title,
      slug: values.slug,
      author: values.author,
      content: values.content,
      image: values.image || undefined,
      dataAiHint: values.dataAiHint || undefined,
      tags: values.tagsInput ? values.tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag) : [],
      status: values.status,
    };

    const success = await updateBlogPost(post.id, updatedPostData);

    if (success) {
      toast({
        title: "Post Actualizado",
        description: `El post "${updatedPostData.title}" ha sido actualizado exitosamente.`,
      });
      router.push("/superadmin/blog-management");
    } else {
       toast({
        variant: "destructive",
        title: "Error al Actualizar",
        description: "No se pudo actualizar el post.",
      });
    }
    setIsLoading(false);
  }
  
  if (isFetchingPost) {
    return (
         <div className="space-y-6">
            <Skeleton className="h-8 w-1/4" />
            <Card className="shadow-md rounded-xl">
                <CardHeader>
                    <Skeleton className="h-7 w-1/2 mb-1" />
                    <Skeleton className="h-4 w-3/4" />
                </CardHeader>
                <CardContent className="pt-6 space-y-6">
                    {[...Array(6)].map((_, i) => <Skeleton key={i} className="h-10 w-full" />)}
                    <Skeleton className="h-32 w-full" />
                </CardContent>
                <CardContent className="border-t pt-6 flex justify-end">
                    <Skeleton className="h-10 w-32" />
                </CardContent>
            </Card>
        </div>
    );
  }

  if (!post && !isFetchingPost) {
    return (
      <div className="text-center py-10">
        <AlertTriangle className="mx-auto h-12 w-12 text-destructive mb-4" />
        <h2 className="text-xl font-semibold text-destructive">Post no Encontrado</h2>
        <p className="text-muted-foreground mb-6">El post que intentas editar no existe o ha sido eliminado.</p>
        <Button asChild variant="outline">
          <Link href="/superadmin/blog-management">
            <ArrowLeft className="mr-2 h-4 w-4" /> Volver al Listado
          </Link>
        </Button>
      </div>
    );
  }


  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-headline text-primary flex items-center gap-2">
          <BookOpen className="h-6 w-6" /> Editar Post: {post?.title}
        </h1>
        <Button variant="outline" asChild>
          <Link href="/superadmin/blog-management">
            <ArrowLeft className="mr-2 h-4 w-4" /> Volver al Listado
          </Link>
        </Button>
      </div>

      <Card className="shadow-md rounded-xl">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="pt-6 space-y-6">
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Título del Post *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="slug"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Slug (URL Amigable) *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormDescription className="text-xs">Se auto-genera del título si el título cambia y el slug no ha sido modificado manualmente. Usar minúsculas, números y guiones.</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="author"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Autor *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="content"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Contenido del Post (Markdown Simulado) *</FormLabel>
                    <FormControl>
                      <Textarea rows={15} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                    control={form.control}
                    name="image"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>URL de Imagen Destacada (Opcional)</FormLabel>
                        <FormControl>
                        <Input type="url" {...field} />
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="dataAiHint"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Palabras Clave Imagen (Opcional)</FormLabel>
                        <FormControl>
                        <Input {...field} />
                        </FormControl>
                        <FormDescription className="text-xs">Para data-ai-hint (max 2 palabras).</FormDescription>
                        <FormMessage />
                    </FormItem>
                    )}
                />
              </div>
              <FormField
                control={form.control}
                name="tagsInput"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tags (separados por comas, opcional)</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Estado *</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecciona un estado" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Draft">Borrador</SelectItem>
                        <SelectItem value="Published">Publicado</SelectItem>
                        <SelectItem value="Archived">Archivado</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            <CardContent className="border-t pt-6 flex justify-end">
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                <Save className="mr-2 h-4 w-4" /> Actualizar Post
              </Button>
            </CardContent>
          </form>
        </Form>
      </Card>
    </div>
  );
}
